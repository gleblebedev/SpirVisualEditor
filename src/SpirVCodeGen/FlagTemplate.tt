<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;

namespace SpirVGraph.Spv
{
    public partial class <#= Name #> : ValueEnum
    {
		[Flags]
        public enum Enumerant
        {
<#
		foreach (var kv in Values)
		{
			foreach (var capability in kv.capabilities ?? EmptyReadOnlyList<string>.Instance)
			{
#>
            [Capability(Capability.Enumerant.<#= capability #>)]
<#
			}
#>
            <#= GetId(kv.enumerant) #> = <#= kv.value #>,
<#
		}
#>
		}

        public <#= Name #>(Enumerant value)
        {
            Value = value;
        }

        public Enumerant Value { get; }

<#
		foreach (var kv in Values)
		{
			if (kv.parameters != null && kv.parameters.Count > 0)
			{
				bool addIndex = (kv.parameters.Count != 1);
				var enName = GetId(kv.enumerant);
				for (int i=0; i<kv.parameters.Count; ++i)
				{
				var paramName = enName; if (addIndex) paramName += (i+1);
#>
        public <#=Utils.GetTypeName(kv.parameters[i].kind) #> <#=paramName #> { get; set; }
<#
				}
			}
		}
#>


        public static <#= Name #> Parse(WordReader reader, uint wordCount)
        {
			var end = reader.Position+wordCount;
            var id = (Enumerant) reader.ReadWord();
            var value = new <#= Name #>(id);
<#
		foreach (var kv in Values)
		{
			if (kv.parameters != null && kv.parameters.Count > 0)
			{
				bool addIndex = (kv.parameters.Count != 1);
				var enName = GetId(kv.enumerant);
#>
			if (Enumerant.<#=enName #> == (id & Enumerant.<#=enName #>))
			{
<#
				for (int i=0; i<kv.parameters.Count; ++i)
				{
				var paramName = enName; if (addIndex) paramName += (i+1);
#>
				value.<#=paramName #> = Spv.<#=kv.parameters[i].kind #>.Parse(reader, wordCount - 1);
<#
				}
#>
			}
<#
			}
		}
#>
            value.PostParse(reader, wordCount - 1);
            return value;
        }

        public static <#= Name #> ParseOptional(WordReader reader, uint wordCount)
        {
			if (wordCount == 0) return null;
            return Parse(reader, wordCount);
        }

        public static IList<<#= Name #>> ParseCollection(WordReader reader, uint wordCount)
        {
            var end = reader.Position + wordCount;
            var res = new PrintableList<<#= Name #>>();
            while (reader.Position < end)
            {
                res.Add(Parse(reader, end-reader.Position));
            }
            return res;
        }

        public override string ToString()
        {
            return Value.ToString();
        }
    }
}