<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System.Collections.Generic;
using SpirVGraph.Spv;

<#
	var idResult = operands.FirstOrDefault(_=>_.kind == "IdResult");
	var idResultType = operands.FirstOrDefault(_=>_.kind == "IdResultType");
	var isType = idResult!=null && opname.StartsWith("OpType");
#>

namespace SpirVGraph.Instructions
{
    public partial class <#= opname #>: <#= isType ? "TypeInstruction" : (idResult!=null ? "InstructionWithId" : "Instruction") #>
    {
        public <#= opname #>()
        {
        }

        public override Op OpCode { get { return Op.<#= opname #>; } }

<#
	foreach(var op in operands.Where(_=>_.kind != "IdResult"))
	{
#>
		public <#=Utils.GetOperandType(op)#> <#=Utils.GetOperandName(op)#> { get; set; }
<#
	}
#>
        public override IEnumerable<ReferenceProperty> GetReferences()
		{
<#
	foreach(var op in operands.Where(_=>_.kind == "IdRef"))
	{
		var operandName = Utils.GetOperandName(op);
		if (op.quantifier == "*")
		{
#>
			for (int i=0; i<<#=operandName #>.Count; ++i)
				yield return new ReferenceProperty("<#=operandName #>"+i, <#=operandName #>[i]);
<#
		}
		else
		{
#>
		    yield return new ReferenceProperty("<#=operandName #>", <#=operandName #>);
<#
		}
	}
#>
		    yield break;
		}

        public override void Parse(WordReader reader, uint wordCount)
        {
			var end = reader.Position+wordCount-1;
<#
	foreach(var op in operands)
	{
#>
		    <#=Utils.GetOperandName(op)#> = <#=Utils.GetOperandParser(op)#>;
<#
		if (op.kind == "IdResult")
		{
#>
            reader.Instructions.Add(this);
<#
		}
	}
#>
        }

        public override string ToString()
        {
<#
if (idResultType != null && idResult != null)
{
	WriteLine("            return $\"{IdResultType} {IdResult} = {OpCode} "+string.Join(" ", operands.Where(_=>_!=idResult && _!=idResultType).Select(_=>"{"+Utils.GetOperandName(_)+"}"))+"\";");
}
else if (idResult != null)
{
	WriteLine("            return $\"{IdResult} = {OpCode} "+string.Join(" ", operands.Where(_=>_!=idResult).Select(_=>"{"+Utils.GetOperandName(_)+"}"))+"\";");
}
else
{
	WriteLine("            return $\"{OpCode} "+string.Join(" ", operands.Select(_=>"{"+Utils.GetOperandName(_)+"}"))+"\";");
}
#>
        }
    }
}
